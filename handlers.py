import asyncpg.exceptions
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta, time
import app.requests as rq

import app.keyboards as kb

import asyncio

request_com = rq.DBC()

router = Router()


class Reg(StatesGroup):
    new_note = State()
    remove_note = State()
    change_note = State()
    check_note = State()


@router.message(Command('start'))  # Start the bot
async def start_fun(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!üòä\n –Ø - –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–¥–∞—á–∞—Ö,'
                         ' –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.üîñ', reply_markup=kb.start_keyw)
    await request_com.initialize_pool()
    await request_com.record_id(message.from_user.id)  # Do query


@router.message(F.text.lower() == '—Å–æ—Å–∞–ª?')  # Sexy secret
async def sosal(message: Message):
    await message.reply('–î–∞')


@router.callback_query(F.data == 'add')
async def add(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∑–∞–¥–∞—á—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ num;task;hours;minute.'
                                  '\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1;–ö—É–ø–∏—Ç—å –≤–æ–¥–∏—á–∫–∏ –∫–∏–ª–æ–≥—Ä–∞–º–º;19;55')
    await state.set_state(Reg.new_note)


async def wait_func(hour, minute, task, message: Message):  # Initialize sending notification
    await request_com.initialize_pool()
    active_tasks = await request_com.get_info(message.from_user.id)  # –≠—Ç–æ –Ω–µ –ì–≠–ü–≠–¢–≠ –ø–∏—Å–∞–ª :(
    now = datetime.now()
    target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if target_time < now:  # If time that was in the moment of sending message less than specified ...
        target_time += timedelta(days=1)  # ...go to the next day
    wait_time = (target_time - now).total_seconds()  # Create time waiting
    await asyncio.sleep(wait_time)
    if task in active_tasks:  # If exists...
        await message.answer(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}')  # ...send notification
        await request_com.remove_rec(task)
    else:
        pass


@router.message(Reg.new_note)
async def first_step(message: Message, state: FSMContext):
    await request_com.initialize_pool()
    active_tasks = await request_com.get_info(message.from_user.id)
    task_info = message.text.split(';')
    num = int(task_info[0])
    task = task_info[1]
    time_s = time(hour=int(task_info[2]), minute=int(task_info[3]))
    if task in active_tasks or len(task_info) < 4:
        await message.answer('–û–π!üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
                             ' –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏–±–æ –≤–≤–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É')
        await state.clear()
    try:
        await request_com.binding_note(task, time_s, message.from_user.id, num)
    except asyncpg.exceptions.PostgresSyntaxError:
        print('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞')
    await state.update_data(new_note=task_info)
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ!üëå –í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ {task} –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –∏ –¥–∞—Å—Ç –æ —Å–µ–±–µ –∑–Ω–∞—Ç—å –≤ {time_s}')
    await state.clear()
    hour = int(task_info[2])
    minute = int(task_info[3])
    await wait_func(hour, minute, task, message)


@router.callback_query(F.data == 'del')
async def delete_note(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Reg.remove_note)


@router.message(Reg.remove_note)
async def second_step(message: Message, state: FSMContext):
    try:
        await request_com.initialize_pool()
        need_to_rem = int(message.text)
        del_task = await request_com.get_info(message.from_user.id, need_to_rem)
        active_tasks = await request_com.get_info(message.from_user.id)
        if not del_task:
            await message.answer('–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüòû')
            await state.set_state(Reg.remove_note)
        else:
            await request_com.remove_rec(del_task[0])
            await message.answer(f'–ó–∞–º–µ—Ç–∫–∞ \'{del_task[0]}\' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
            await request_com.change_num_id(message.from_user.id, active_tasks)
            await state.clear()
    except ValueError:
        await message.answer('–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        await state.set_state(Reg.remove_note)


@router.callback_query(F.data == 'check')
async def check_notes(callback: CallbackQuery, state: FSMContext):
    await request_com.initialize_pool()
    await callback.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏')
    tasks_info = await request_com.get_full_info(callback.from_user.id)
    if not tasks_info:
        await callback.message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫')
    else:
        await callback.message.answer('–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:')
        for task in tasks_info:
            await callback.message.answer('|'.join(map(str, task)))


@router.callback_query(F.data == 'change')
async def change_note(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É(1;new_note)')
    await state.set_state(Reg.change_note)


@router.message(Reg.change_note)
async def third_step(message: Message, state: FSMContext):
    await request_com.initialize_pool()
    new_note_info = message.text.split(';')
    await request_com.change(message.from_user.id, int(new_note_info[0]), new_note_info[1])
    await message.answer(f'–ì–æ—Ç–æ–≤–æ! –ó–∞–º–µ—Ç–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {new_note_info[0]} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {new_note_info[1]}')
    await state.clear()
